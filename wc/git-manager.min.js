"use strict";webui.define("app-git-manager",{linkCss:!0,watchVisibility:!1,isInput:!1,preload:"",constructor:t=>{t._repos=t.template.querySelector('webui-dropdown[label="Repo"]'),t._fileName=t.template.querySelector("h3"),t._filesContainer=t.template.querySelector(".files"),t._viewNew=t.template.querySelector(".view-new"),t._viewOld=t.template.querySelector(".view-old"),t._message=t.template.querySelector('webui-input-message[label="Commit Message"]'),t._alert=t.template.querySelector("webui-alert"),t._btnRefresh=t.template.querySelector('webui-button[label="Refresh"]'),t._btnCommit=t.template.querySelector('webui-button[label="Commit"]'),t._btnSync=t.template.querySelector('webui-button[label="Sync"]'),t._btnPush=t.template.querySelector('webui-button[label="Push"]'),t._btnPull=t.template.querySelector('webui-button[label="Pull"]'),t._instructions=t.template.querySelector(".instructions")},loadRepos:async function(){let t=this,repos=await webui.proxy.git.getRepos();if(0===repos.length)t._repos.classList.add("hidden");else{let options=repos.map((item=>({id:item,value:item,display:""===item?"Root":item})));t._repos.setOptions(options),t._repos.classList.remove("hidden"),webui.projectData.data.selectedGitRepo&&(t._repos.value=webui.projectData.data.selectedGitRepo)}},loadFileDiff:async function(changeDetail){let t=this;if(t._fileName.innerHTML=`<em>Loading</em> ${changeDetail.display}`,t._viewOld.setLines([]),t._viewNew.setLines([]),changeDetail.fileName.endsWith("/"))return;let data={change:changeDetail.change,isCompare:!1},fullFilePath=""===changeDetail.repo?changeDetail.fileName:`${changeDetail.repo}/${changeDetail.fileName}`;switch(data.fileDiff="Add"!==changeDetail.change?await webui.proxy.git.getFileDiff(changeDetail.repo,changeDetail.fileName):"",changeDetail.change){case"Add":case"Delete":t._viewOld.classList.add("hidden"),t._viewNew.style.setProperty("grid-column","1/3");break;default:data.isCompare=void 0!==data.fileDiff,t._viewOld.classList.remove("hidden"),t._viewNew.style.removeProperty("grid-column")}if("Delete"===changeDetail.change){let a=fileDiff.split("@@");data.fileContent=a[a.length-1].substring(1)}else data.fileContent=await webui.proxy.getProjectFile(fullFilePath);if(void 0!==data.fileContent){let result=await webui.proxy.worker.send("processFileDiff",data);t._viewOld.setLines(result.old),t._viewNew.setLines(result.new)}t._fileName.innerHTML=changeDetail.display},loadRepoChanges:async function(){let t=this;t._filesContainer.innerText="";let repo=t._repos.value;if(void 0===repo)return;let changes=await webui.proxy.git.getChanges(repo);t._fileName.innerHTML="",t._viewOld.setLines([]),t._viewNew.setLines([]);let first=null;t._files=[],changes.forEach((fileName=>{let changeDetail=fileName.trim().split(" "),changeType=changeDetail[0],theme="info";switch(changeType){case"M":changeType="Modify";break;case"D":changeType="Delete",theme="danger";break;case"??":changeType="Add",theme="success"}let display=changeDetail[1].split("/");display=display[display.length-1];let details={repo:repo,change:changeType,fileName:changeDetail[1],display:`<span class="change-type">${changeType}</span> <strong>${display}</strong>`,isIncluded:!0};t._files.push(details);let btn=webui.create("webui-button",{label:details.display,title:details.fileName,align:"left",theme:theme}),options=[{value:"1",display:"Include"},{value:"0",display:"Exclude"},{value:"2",display:"Ignore"}],include=webui.create("webui-dropdown",{});t._filesContainer.appendChild(include),t._filesContainer.appendChild(btn),include.setOptions(options);const fullPath=`${details.repo}/${details.fileName}`;function setTheme(){switch(include.value){case"0":include.setAttribute("theme","info"),details.isIncluded=!1;break;case"2":include.setAttribute("theme","warning"),details.isIncluded=!1;break;default:details.isIncluded=!0,include.setAttribute("theme","success")}}include.addEventListener("change",(_=>{"2"===include.value?(webui.projectData.data.gitIgnoreFiles||(webui.projectData.data.gitIgnoreFiles=[]),-1===webui.projectData.data.gitIgnoreFiles.indexOf(fullPath)&&webui.projectData.data.gitIgnoreFiles.push(fullPath)):webui.projectData.data.gitIgnoreFiles&&-1!==webui.projectData.data.gitIgnoreFiles.indexOf(fullPath)&&webui.projectData.data.gitIgnoreFiles.splice(webui.projectData.data.gitIgnoreFiles.indexOf(fullPath),1),webui.proxy.syncProjectData(),setTheme()})),webui.projectData.data.gitIgnoreFiles&&-1!==webui.projectData.data.gitIgnoreFiles.indexOf(fullPath)&&(include.value=2),setTheme(),btn.addEventListener("click",(_=>{t.loadFileDiff(details)})),first||(first=!0,t.loadFileDiff(details))}))},setAlert:function(msg,severity){this._alert.setValue(msg?{theme:severity,html:msg}:null)},connected:function(t){webui.proxy.projects.runWhenLoaded((()=>{t.loadRepos()})),t._repos.addEventListener("change",(_=>{webui.projectData.data.selectedGitRepo=t._repos.value,t.loadRepoChanges()})),t._viewNew.addEventListener("change",(_=>{t._viewOld.getScroll()!==t._viewNew.getScroll()&&t._viewOld.setScroll(t._viewNew.getScroll())})),t._viewOld.addEventListener("change",(_=>{t._viewOld.getScroll()!==t._viewNew.getScroll()&&t._viewNew.setScroll(t._viewOld.getScroll())})),t._btnCommit.addEventListener("click",(async _=>{let message=t._message.value.trim();if(t.setAlert(),!message)return void t.setAlert("You forgot to set your message!");let files=[];if(t._files.forEach((item=>{item.isIncluded&&files.push(item.fileName)})),0===files.length)return void t.setAlert("There are no files to commit!");let repo=t._repos.value;if(void 0===repo)return void t.setAlert("No repo is set!");let result=await webui.proxy.git.commit(repo,files,message,(msg=>t.setAlert(msg)));result&&t.setAlert(result,"success"),t.loadRepoChanges()})),t._btnPull.addEventListener("click",(async _=>{t.setAlert();let repo=t._repos.value;if(void 0===repo)return void t.setAlert("No repo is set!");let result=await webui.proxy.git.pull(repo,(msg=>t.setAlert(msg)));result&&t.setAlert(result,"success"),t.loadRepoChanges()})),t._btnRefresh.addEventListener("click",(async _=>{t.loadRepos()})),t._btnPush.addEventListener("click",(async _=>{t.setAlert();let repo=t._repos.value;if(void 0===repo)return void t.setAlert("No repo is set!");let result=await webui.proxy.git.push(repo,(msg=>t.setAlert(msg)));result&&t.setAlert(result,"success")})),t._btnSync.addEventListener("click",(async _=>{t.setAlert();let repo=t._repos.value;if(void 0===repo)return void t.setAlert("No repo is set!");let result=await webui.proxy.git.sync(repo,(msg=>t.setAlert(msg)));result&&t.setAlert(result,"success"),t.loadRepoChanges()})),t._instructions.innerHTML=webui.parseMarkdown('\nSelect which files you want to commit, create your commit message, and press Commit to save your current changes.\n\n### File Options\n\n- <webui-button theme="success">Include</webui-button> *Default* Include file with commit.\n- <webui-button theme="info">Exclude</webui-button> Exclude file from current commit.\n- <webui-button theme="warning">Ignore</webui-button> Always exclude file from commits.\n')},disconnected:function(t){},shadowTemplate:'\n<webui-flex>\n<webui-button theme="info" label="Refresh"></webui-button>\n<webui-dropdown class="hidden" label="Repo"></webui-dropdown>\n<webui-button theme="info" label="Sync"></webui-button>\n<webui-button theme="tertiary" label="Pull"></webui-button>\n<webui-button theme="secondary" label="Push"></webui-button>\n<webui-button theme="primary" label="Commit"></webui-button>\n</webui-flex>\n<webui-alert></webui-alert>\n<webui-grid columns="2fr 3fr">\n<webui-quote theme="title" class="instructions"></webui-quote>\n<webui-input-message class="h-fill" theme="title" label="Commit Message"></webui-input-message>\n</webui-grid>\n<webui-grid columns="max-content 1fr">\n<webui-grid columns="max-content 1fr" class="files"></webui-grid>\n<webui-flex column>\n<h3></h3>\n<webui-grid columns="1fr 1fr">\n<webui-canvas height="60vh" theme="black" line-numbers class="view-old" data-subscribe="git-canvas-scroll:setScroll" data-trigger="git-canvas-scroll:getScroll"></webui-canvas>\n<webui-canvas height="60vh" theme="black" line-numbers class="view-new" data-subscribe="git-canvas-scroll:setScroll" data-trigger="git-canvas-scroll:getScroll"></webui-canvas>\n<webui-grid gap="0" columns="max-content 1fr" class="view-olds"></webui-grid>\n<webui-grid gap="0" columns="max-content 1fr" class="view-news"></webui-grid>\n</webui-grid>\n</webui-flex>\n</webui-grid>\n<style type="text/css">\n:host {\n}\npre {\nmargin:0;\npadding:0;\n}\n</style>\n'});