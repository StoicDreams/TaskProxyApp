function get_uuid(){try{return crypto.randomUUID()}catch(ex){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(c){let r=16*Math.random()|0;return("x"==c?r:3&r|8).toString(16)}))}}self.addEventListener("install",(event=>event.waitUntil(onInstall(event)))),self.addEventListener("activate",(event=>event.waitUntil(onActivate(event)))),self.addEventListener("fetch",(event=>event.respondWith(onFetch(event))));const currentVersion=`${get_uuid()}`;console.log("Current version",currentVersion,location.host);const cacheNamePrefix="offline-cache-",cacheName=`${cacheNamePrefix}${currentVersion}_ts_2503251820`,offlineAssetsInclude=[/\.wasm/,/\.html/,/\.js$/,/\.json$/,/\.css$/,/\.woff$/,/\.png$/,/\.jpe?g$/,/\.gif$/,/\.ico$/],offlineAssetsExclude=[/^service-worker\.js$/];async function onInstall(event){console.info(`Service worker: Install ${cacheName}`),self.skipWaiting()}async function onActivate(event){console.info(`Service worker: Activate ${cacheName}`);const cacheKeys=await caches.keys();await Promise.all(cacheKeys.filter((key=>key.startsWith(cacheNamePrefix)&&key!==cacheName)).map((key=>caches.delete(key))))}async function onFetch(event){let cachedResponse=null,request=applyCacheBusting(event.request);if(allowCache(request)){const cache=await caches.open(cacheName);cachedResponse=await cache.match(request)}return cachedResponse||fetch(request)}function applyCacheBusting(request){try{if(!request.url.startsWith("https://cdn.myfi.ws"))return request;const url=new URL(request.url);return url.searchParams.set("_",cacheName),new Request(url.toString(),request)}catch{return request}}function allowCache(request){return"GET"===request.method&&"navigate"!==request.mode}