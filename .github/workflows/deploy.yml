name: 'Build and Publish'

on:
  push:
    branches:
      - main

env:
  VERSION: 0.1.0

jobs:
  build-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
      - name: import windows certificate
        if: matrix.platform == 'windows-latest'
        run: |
          # TODO
      - name: import mac certificate
        if: matrix.platform == 'macos-latest'
        run: |
          # TODO
      - name: import ubuntu certificate
        if: matrix.platform == 'ubuntu-latest'
        run: |
          # TODO
      - name: install frontend dependencies
        run: |
          cargo install trunk
          rustup target add wasm32-unknown-unknown
          cargo build --release
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false

      - name: Save Windows files to artifact
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: taskproxyartifactswindows
          path: |
            target\release\
      - name: Save Mac files to artifact
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: taskproxyartifactsmac
          path: |
            target/release/
      - name: Save Ubuntu files to artifact
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: taskproxyartifactsubuntu
          path: |
            target/release/
  publish-tauri-window:
    needs: build-tauri
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: taskproxyartifactswindows
      - name: 'Copy via SCP'
        uses: garygrossgarten/github-action-scp@release
        with:
          local: ./target/release
          remote: ${{ secrets.CDN_APP_PATH }}/win
          host: ${{ secrets.CDN_SERVER_DOMAIN }}
          username: ${{ secrets.API_SERVER_USER_NAME }}
          password: ${{ secrets.API_SERVER_USER_PASSWORD }}
  publish-tauri-mac:
    needs: build-tauri
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: taskproxyartifactsmac
      - name: 'Copy via SCP'
        uses: garygrossgarten/github-action-scp@release
        with:
          local: ./target/release
          remote: ${{ secrets.CDN_APP_PATH }}/mac
          host: ${{ secrets.CDN_SERVER_DOMAIN }}
          username: ${{ secrets.API_SERVER_USER_NAME }}
          password: ${{ secrets.API_SERVER_USER_PASSWORD }}
  publish-tauri-ubuntu:
    needs: build-tauri
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: taskproxyartifactsubuntu
      - name: 'Copy via SCP'
        uses: garygrossgarten/github-action-scp@release
        with:
          local: ./target/release
          remote: ${{ secrets.CDN_APP_PATH }}/mac
          host: ${{ secrets.CDN_SERVER_DOMAIN }}
          username: ${{ secrets.API_SERVER_USER_NAME }}
          password: ${{ secrets.API_SERVER_USER_PASSWORD }}
  publish-tauri-old:
    needs: build-tauri
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: taskproxyartifactsubuntu
      - name: Rename files before copy
        run: |
          ls
          mv 'msi/Task Proxy_${{ env.VERSION }}_x64_en-US.msi' 'msi/task-proxy_${{ env.VERSION }}_x64_en-US.msi'
          mv 'nsis/Task Proxy_${{ env.VERSION }}_x64-setup.exe' 'nsis/task-proxy_${{ env.VERSION }}_x64-setup.exe'
          mv 'dmg/Task Proxy_${{ env.VERSION }}_x64.dmg' 'dmg/task-proxy_${{ env.VERSION }}_x64.dmg'
          mv 'macos/Task Proxy.app' 'task-proxy_${{ env.VERSION }}.app'
      - name: Copy Binary Files to MyFi CDN
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage copy -s 'msi/task-proxy_${{ env.VERSION }}_x64_en-US.msi' --account-name ${{ secrets.ACCOUNT_NAME }} --destination-container 'taskproxy'
            az storage copy -s 'nsis/task-proxy_${{ env.VERSION }}_x64-setup.exe' --account-name ${{ secrets.ACCOUNT_NAME }} --destination-container 'taskproxy'
            az storage copy -s 'deb/task-proxy_${{ env.VERSION }}_amd64.deb' --account-name ${{ secrets.ACCOUNT_NAME }} --destination-container 'taskproxy'
            az storage copy -s 'appimage/task-proxy_${{ env.VERSION }}_amd64.AppImage' --account-name ${{ secrets.ACCOUNT_NAME }} --destination-container 'taskproxy'
            az storage copy -s 'dmg/task-proxy_${{ env.VERSION }}_x64.dmg' --account-name ${{ secrets.ACCOUNT_NAME }} --destination-container 'taskproxy'
            az storage copy -s 'task-proxy_${{ env.VERSION }}.app' --account-name ${{ secrets.ACCOUNT_NAME }} --destination-container 'taskproxy' --recursive
      - name: logout
        run: |
          az logout
        if: always()